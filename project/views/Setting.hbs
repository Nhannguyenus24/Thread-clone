<div class="flex flex-col p-6 ">
  <div class="w-full flex mb-3">
    <a href="/setting/account" onclick="chooseMode(this)" class="block flex-1 border-b border-[#f3f5f7] text-center text-[#f3f5f7] leading-[3rem]">Account</a>
    <a href="/setting/help" onclick="chooseMode(this)" class="block flex-1 border-b border-[#f3f5f7] text-center text-[#f3f5f7] leading-[3rem]">Help</a>
  </div>
  {{#if (eq currentPage 'account')}}
<div class="flex flex-col">
  
  <div class="mb-6 p-3 w-full">
    <label for="username" class="block mb-2">Username</label>
    <div id="username-section" class="flex items-center space-x-4">
      <span id="username-value" class="mr-auto text-[#666666]">{{username}}</span>
      <button onclick="editField('username')" class="text-blue-500 hover:text-blue-700">Edit</button>
    </div>
    <div id="username-edit" class="flex items-center space-x-4 hidden mt-2">
      <input type="text" id="username-input" name="username" value="{{username}}" class="bg-[#0a0a0a] text-[#666666] w-full px-4 py-2 border border-[#333333] rounded-lg focus:outline-none" />
      <button onclick="saveField(event, 'username')" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Save</button>
      <button onclick="cancelEdit('username')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
    </div>
  </div>

    <div class="mb-6 p-3 w-full">
    <label for="fullname" class="block mb-2">Full name</label>
    <div id="fullname-section" class="flex items-center space-x-4">
        {{#if fullname}}
          <span id="fullname-value" class="mr-auto text-[#666666]">{{fullname}}</span>
        {{else}}
          <span id="fullname-value" class="mr-auto text-[#333333]">Your fullname</span>
        {{/if}}
      <button onclick="editField('fullname')" class="text-blue-500 hover:text-blue-700">Edit</button>
    </div>
    <div id="fullname-edit" class="flex items-center space-x-4 hidden mt-2">
      <input type="fullname" id="fullname-input" name="fullname" value="{{fullname}}" class="w-full bg-[#0a0a0a] text-[#666666] px-4 py-2 border border-[#333333] rounded-lg focus:outline-none" />
      <button onclick="saveField(event, 'fullname')" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Save</button>
      <button onclick="cancelEdit('fullname')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
    </div>
  </div>

    <div class="mb-6 p-3 w-full">
    <label for="quote" class="block mb-2">Bio</label>
    <div id="quote-section" class="flex items-center space-x-4">
        {{#if quote}}
          <span id="quote-value" class="mr-auto text-[#666666]">{{quote}}</span>
        {{else}}
          <span id="quote-value" class="mr-auto text-[#333333]">Tell us about yourself (interests, experience, etc.)</span>
        {{/if}}
      <button onclick="editField('quote')" class="text-blue-500 hover:text-blue-700">Edit</button>
    </div>
    <div id="quote-edit" class="flex items-center space-x-4 hidden mt-2">
      <input type="quote" id="quote-input" name="quote" value="{{quote}}" class="w-full bg-[#0a0a0a] text-[#666666] px-4 py-2 border border-[#333333] rounded-lg focus:outline-none" />
      <button onclick="saveField(event, 'quote')" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Save</button>
      <button onclick="cancelEdit('quote')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
    </div>
  </div>

  <div class="mb-6 p-3 w-full">
    <label for="email" class="block mb-2">Email</label>
    <div id="email-section" class="flex items-center space-x-4">
      <span id="email-value" class="mr-auto text-[#666666]">{{email}}</span>
      <button onclick="editField('email')" class="text-blue-500 hover:text-blue-700">Edit</button>
    </div>
    <div id="email-edit" class="flex items-center space-x-4 hidden mt-2">
      <input type="email" id="email-input" name="email" value="{{email}}" class="w-full bg-[#0a0a0a] text-[#666666] px-4 py-2 border border-[#333333] rounded-lg focus:outline-none" />
      <button onclick="saveField(event, 'email')" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Save</button>
      <button onclick="cancelEdit('email')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
    </div>
  </div>

  <div class="mb-6 p-3 w-full">
    <label for="current-password" class="block mb-2">Password</label>
    <div id="current-password-section" class="flex items-center space-x-4">
      <span id="current-password-value" class="mr-auto">**********</span>
      <button onclick="editField('current-password')" class="text-blue-500 hover:text-blue-700">Edit</button>
    </div>
    <div id="current-password-edit" class="hidden mt-2">
      <label for="new-password" class="block text-sm  my-2">Old password</label>
      <input type="password" id="current-password-input" name="current-password" placeholder="old password" class="bg-[#0a0a0a] text-[#f3f5f7] w-full px-4 py-2 border border-[#333333] rounded-lg focus:outline-none" />
      <label for="new-password" class="block text-sm  my-2">New password</label>
      <input type="password" id="new-password" name="new-password" placeholder="new password" class="bg-[#0a0a0a] text-[#f3f5f7] w-full px-4 py-2 border border-[#333333] rounded-lg  focus:outline-none" />
      <label for="confirm-password" class="block text-sm  my-2">Re-enter new password</label>
      <input type="password" id="confirm-password" name="confirm-password" placeholder="new password" class="bg-[#0a0a0a] text-[#f3f5f7] w-full px-4 py-2 border border-[#333333] rounded-lg focus:outline-none" />
      <button onclick="saveField(event, 'current-password')" class="w-full mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Change password</button>
      <button onclick="cancelEdit('current-password')" class="w-full mt-4 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
    </div>
  </div>

  <div class="mb-6 p-3 w-full">
  <label for="avatar" class="block mb-2">Avatar</label>
  <div id="avatar-section" class="flex items-center space-x-4">
    <img id="avatar-preview" src="{{avatar}}" alt="Avatar" class="w-20 h-20  border border-[#777777] rounded-[10px] object-cover mr-auto" />
    <button onclick="editField('avatar')" class="text-blue-500 hover:text-blue-700">Edit</button>
  </div>
  <div id="avatar-edit" class="flex items-center hidden my-2">
    <input type="file" id="avatar-input" name="avatar" accept="image/*" class="hidden" />
    <button onclick="saveField(event, 'avatar')" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 mr-4">Save</button>
    <button onclick="cancelEdit('avatar', '{{avatar}}')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
  </div>
</div>
<div class="mb-6 p-3 w-full flex justify-center">
  <button onclick="logOut(event)" class="bg-[#f3f5f7] py-2 px-4 border border-[#333333] rounded-lg text-black no-underline font-semibold w-[60%]">Log out</button>
</div>

  {{/if}}
  {{#if (eq currentPage 'help')}}
  {{#each externals}}
    {{> external}}
    {{/each}}
  {{/if}}
</div>
  <div class="fixed bottom-[40px] left-1/2 transform -translate-x-1/2 bg-white text-black p-[10px_20px] rounded-[8px] shadow-[0_2px_10px_rgba(0,0,0,0.2)] opacity-100 animate-slideUp animate-stay animate-slideDown" id="errorNotification" style="display: none;">
  </div>
</div>
<script>
  function showError(message) {
    const errorNotification = document.getElementById('errorNotification');
    errorNotification.innerText = message;
    errorNotification.style.display = "block";
    setTimeout(() => {
      errorNotification.style.display = "none";
    }, 3000);
  }
  async function logOut(e){
    e.preventDefault();
    const response = await fetch('http://localhost:3000/logout', {
      method: 'GET',
    });
    if (response.ok){
      window.location.href = '/';
    }
  }

  function editField(field) {
  const valueElement = document.getElementById(`${field}-value`);
  const editSection = document.getElementById(`${field}-edit`);
  const section = document.getElementById(`${field}-section`);

  valueElement?.classList.add('hidden');
  section.querySelector('button').classList.add('hidden');
  editSection.classList.remove('hidden');

  if (field === 'avatar') {
    const inputElement = document.getElementById(`${field}-input`);
    inputElement.click();
    inputElement.addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file) {
        const previewElement = document.getElementById(`${field}-preview`);
        previewElement.src = URL.createObjectURL(file);
      }
    });
  }
}

const validateUsername = (username) => {
    const usernameRegex = /^[a-zA-Z0-9.-_]{1,30}$/;
    return usernameRegex.test(username);
};

async function saveField(event, field) {
  event.preventDefault();
  const inputElement = document.getElementById(`${field}-input`);
  const valueElement = document.getElementById(`${field}-value`);
  const editSection = document.getElementById(`${field}-edit`);
  const section = document.getElementById(`${field}-section`);
  const username = document.getElementById('username-value').textContent;
  if (field === 'avatar') {
    const file = inputElement.files[0];
    const formData = new FormData();
    formData.append('file', file);
    const response = await fetch('http://localhost:3000/setting/avatar', {
      method: 'POST',
      body: formData,
    })
    const data = await response.json();
    if (response.ok){
      document.getElementById('avatar-preview').src = data.link;
      cancelEdit(field);
    }
    else {
      showError(data.message);
      return cancelEdit(field);
    }
  } 
  else if (field === 'current-password') {
    const currentPassword = document.getElementById('current-password-input').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    if (newPassword !== confirmPassword) {
      showError('The new password does not match!');
      return;
    }
    else if (newPassword == '' || confirmPassword == '') {
      showError('Please fill in all the information!');
      return;
    }
    else if (newPassword == currentPassword) {
      showError('The new password cannot be the same as the old password!');
      return;
    }
    const response = await fetch('http://localhost:3000/setting/password', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        currentPassword: currentPassword,
        newPassword: newPassword,
      }),
    })
    const data = await response.json();

    if (response.ok){
      cancelEdit(field);
    }
    else {
      showError(data.message);
      return cancelEdit(field);
    }
  }
  else {
    const oldValue = valueElement?.textContent.trim() || "";
    let newValue = inputElement?.value.trim();
    if (field === 'username') {
      if (!validateUsername(newValue)) {
        showError("Invalid username. Username should be alpha digit with dash, hyphen or dot only and limit in length (30 characters).");
        return cancelEdit(field);
      }
      newValue = newValue.replace(/\s+/g, ' ').trim();
    }
    if (oldValue === newValue) {
      return cancelEdit(field);
    }
    else {
      const response = await fetch('http://localhost:3000/setting/change', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          field: field,
          value: newValue,
        }),
      })
      const data = await response.json();

      if (response.ok){
        valueElement.textContent = inputElement.value;
        valueElement?.classList.remove('hidden');
        section.querySelector('button').classList.remove('hidden');
        editSection.classList.add('hidden');
      }
      else {
        showError(data.message);
        return cancelEdit(field);
      }
    }
  }

  valueElement?.classList.remove('hidden');
  section.querySelector('button').classList.remove('hidden');
  editSection.classList.add('hidden');
}

function cancelEdit(field, src ="") {
  const inputElement = document.getElementById(`${field}-input`);
  const valueElement = document.getElementById(`${field}-value`);
  const editSection = document.getElementById(`${field}-edit`);
  const section = document.getElementById(`${field}-section`);
  if (field === 'avatar' && src != '')
    document.getElementById('avatar-preview').src = src;
    inputElement.value = '';

  valueElement?.classList.remove('hidden');
  section.querySelector('button').classList.remove('hidden');
  editSection.classList.add('hidden');
}
function highlightActiveLink() {
  const allLinks = document.querySelectorAll('.w-full a');
  const currentPath = window.location.pathname;

  allLinks.forEach((link) => {
    if (link.getAttribute('href') === currentPath) {
      link.style.color = '#f3f5f7';
      link.style.borderColor = '#f3f5f7';
    } else {
      link.style.color = '#777777';
      link.style.borderColor = '#777777';
    }
  });
}

document.addEventListener('DOMContentLoaded', highlightActiveLink);
</script>